generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Funcionario {
  id         Int        @id @default(autoincrement())
  nome       String
  email      String     @unique
  senha      String
  pedidos    Pedido[]
  criadoEm   DateTime   @default(now())
  entregas   Entrega[]
}

model Cliente {
  id         Int        @id @default(autoincrement())
  nome       String
  email      String     @unique
  pedidos    Pedido[]
  criadoEm   DateTime   @default(now())
  avaliacoes Avaliacao[]
  comentarios Comentario[]
}

model Pedido {
  id            Int          @id @default(autoincrement())
  descricao     String
  status        Status       @default(PENDENTE)
  cliente       Cliente      @relation(fields: [clienteId], references: [id])
  clienteId     Int
  funcionario   Funcionario? @relation(fields: [funcionarioId], references: [id])
  funcionarioId Int?
  criadoEm      DateTime     @default(now())
  avaliacoes    Avaliacao[]
  comentarios   Comentario[]
  entrega       Entrega?
}

model Produto {
  id          Int       @id @default(autoincrement())
  nome        String
  preco       Float
  descricao   String?
  criadoEm    DateTime  @default(now())
  avaliacoes  Avaliacao[]
  comentarios Comentario[]
}

enum Status {
  PENDENTE
  ACEITO
  RECUSADO
}

model Avaliacao {
  id          Int       @id @default(autoincrement())
  nota        Int
  comentario  String?
  cliente     Cliente   @relation(fields: [clienteId], references: [id])
  clienteId   Int
  pedido      Pedido?   @relation(fields: [pedidoId], references: [id])
  pedidoId    Int?
  produto     Produto?  @relation(fields: [produtoId], references: [id])
  produtoId   Int?
  criadoEm    DateTime  @default(now())
}

model Comentario {
  id          Int       @id @default(autoincrement())
  texto       String
  cliente     Cliente   @relation(fields: [clienteId], references: [id])
  clienteId   Int
  pedido      Pedido?   @relation(fields: [pedidoId], references: [id])
  pedidoId    Int?
  produto     Produto?  @relation(fields: [produtoId], references: [id])
  produtoId   Int?
  criadoEm    DateTime  @default(now())
}

enum StatusEntrega {
  PREPARANDO
  EM_ROTA
  ENTREGUE
  CANCELADO
}

model Entrega {
  id            Int           @id @default(autoincrement())
  pedido        Pedido        @relation(fields: [pedidoId], references: [id])
  pedidoId      Int           @unique
  funcionario   Funcionario?  @relation(fields: [funcionarioId], references: [id])
  funcionarioId Int?
  enderecoEntrega String
  statusEntrega StatusEntrega @default(PREPARANDO)
  dataPrevista  DateTime?
  dataEntrega   DateTime?
  criadoEm      DateTime      @default(now())
  atualizadoEm  DateTime      @updatedAt
}